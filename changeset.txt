diff --git a/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/get-diagnose-workflow-query-options.ts b/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/get-diagnose-workflow-query-options.ts
index efc6601b..64497413 100644
--- a/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/get-diagnose-workflow-query-options.ts
+++ b/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/get-diagnose-workflow-query-options.ts
@@ -1,20 +1,15 @@
-import { type UseQueryOptions } from '@tanstack/react-query';
 import queryString from 'query-string';
 
-import { type DiagnoseWorkflowResponse } from '@/route-handlers/diagnose-workflow/diagnose-workflow.types';
 import request from '@/utils/request';
-import { type RequestError } from '@/utils/request/request-error';
 
-import { type UseDiagnoseWorkflowParams } from './use-diagnose-workflow.types';
+import {
+  type DiagnoseWorkflowQueryOptions,
+  type UseDiagnoseWorkflowParams,
+} from './use-diagnose-workflow.types';
 
 export default function getDiagnoseWorkflowQueryOptions(
   params: UseDiagnoseWorkflowParams
-): UseQueryOptions<
-  DiagnoseWorkflowResponse,
-  RequestError,
-  DiagnoseWorkflowResponse,
-  [string, UseDiagnoseWorkflowParams]
-> {
+): DiagnoseWorkflowQueryOptions {
   return {
     queryKey: ['diagnoseWorkflow', params],
     queryFn: async ({
diff --git a/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/use-diagnose-workflow.ts b/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/use-diagnose-workflow.ts
index 98f4b762..dd0fe26e 100644
--- a/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/use-diagnose-workflow.ts
+++ b/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/use-diagnose-workflow.ts
@@ -1,8 +1,17 @@
 import { useQuery } from '@tanstack/react-query';
 
 import getDiagnoseWorkflowQueryOptions from './get-diagnose-workflow-query-options';
-import { type UseDiagnoseWorkflowParams } from './use-diagnose-workflow.types';
+import {
+  type DiagnoseWorkflowQueryOptions,
+  type UseDiagnoseWorkflowParams,
+} from './use-diagnose-workflow.types';
 
-export default function useDiagnoseWorkflow(params: UseDiagnoseWorkflowParams) {
-  return useQuery(getDiagnoseWorkflowQueryOptions(params));
+export default function useDiagnoseWorkflow(
+  params: UseDiagnoseWorkflowParams,
+  additionalOptions?: Partial<DiagnoseWorkflowQueryOptions>
+) {
+  return useQuery({
+    ...getDiagnoseWorkflowQueryOptions(params),
+    ...additionalOptions,
+  });
 }
diff --git a/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/use-diagnose-workflow.types.ts b/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/use-diagnose-workflow.types.ts
index 6ffa40ae..f24d501a 100644
--- a/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/use-diagnose-workflow.types.ts
+++ b/src/views/workflow-diagnostics/hooks/use-diagnose-workflow/use-diagnose-workflow.types.ts
@@ -1,6 +1,18 @@
+import { type UseQueryOptions } from '@tanstack/react-query';
+
+import { type DiagnoseWorkflowResponse } from '@/route-handlers/diagnose-workflow/diagnose-workflow.types';
+import { type RequestError } from '@/utils/request/request-error';
+
 export type UseDiagnoseWorkflowParams = {
   domain: string;
   cluster: string;
   workflowId: string;
   runId: string;
 };
+
+export type DiagnoseWorkflowQueryOptions = UseQueryOptions<
+  DiagnoseWorkflowResponse,
+  RequestError,
+  DiagnoseWorkflowResponse,
+  [string, UseDiagnoseWorkflowParams]
+>;
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.styles.ts b/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.styles.ts
index 30567667..87d9fc70 100644
--- a/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.styles.ts
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.styles.ts
@@ -1,60 +1,10 @@
-import { styled as createStyled, withStyle } from 'baseui';
-import {
-  type SegmentedControlOverrides,
-  type SegmentOverrides,
-} from 'baseui/segmented-control';
+import { styled as createStyled } from 'baseui';
 import { type Theme } from 'baseui/theme';
-import { type StyleObject } from 'styletron-react';
-
-import PageSection from '@/components/page-section/page-section';
 
 export const styled = {
-  PageSection: withStyle(PageSection, ({ $theme }: { $theme: Theme }) => ({
-    display: 'flex',
-    flexDirection: 'column',
-    gap: $theme.sizing.scale800,
-  })),
   ButtonsContainer: createStyled('div', ({ $theme }: { $theme: Theme }) => ({
     display: 'flex',
     justifyContent: 'space-between',
     gap: $theme.sizing.scale300,
   })),
 };
-
-export const overrides = {
-  viewToggle: {
-    Root: {
-      style: ({ $theme }: { $theme: Theme }): StyleObject => ({
-        height: $theme.sizing.scale950,
-        padding: $theme.sizing.scale0,
-        borderRadius: $theme.borders.radius300,
-        ...$theme.typography.ParagraphSmall,
-        width: 'auto',
-        flexGrow: 1,
-        [$theme.mediaQuery.medium]: {
-          flexGrow: 0,
-        },
-      }),
-    },
-    SegmentList: {
-      style: ({ $theme }: { $theme: Theme }): StyleObject => ({
-        height: $theme.sizing.scale950,
-        ...$theme.typography.ParagraphSmall,
-      }),
-    },
-    Active: {
-      style: ({ $theme }: { $theme: Theme }): StyleObject => ({
-        height: $theme.sizing.scale900,
-        top: 0,
-      }),
-    },
-  } satisfies SegmentedControlOverrides,
-  viewToggleSegment: {
-    Segment: {
-      style: ({ $theme }: { $theme: Theme }): StyleObject => ({
-        height: $theme.sizing.scale900,
-        whiteSpace: 'nowrap',
-      }),
-    },
-  } satisfies SegmentOverrides,
-};
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.tsx b/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.tsx
index 259ef586..6fab2512 100644
--- a/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.tsx
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.tsx
@@ -1,17 +1,12 @@
 'use client';
 
-import React, { useEffect, useState } from 'react';
+import React, { useState } from 'react';
 
-import { Segment, SegmentedControl } from 'baseui/segmented-control';
-import { MdCode, MdSort } from 'react-icons/md';
-
-import SectionLoadingIndicator from '@/components/section-loading-indicator/section-loading-indicator';
-
-import useDiagnoseWorkflow from '../hooks/use-diagnose-workflow/use-diagnose-workflow';
 import WorkflowDiagnosticsJson from '../workflow-diagnostics-json/workflow-diagnostics-json';
 import WorkflowDiagnosticsList from '../workflow-diagnostics-list/workflow-diagnostics-list';
+import WorkflowDiagnosticsViewToggle from '../workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle';
 
-import { overrides, styled } from './workflow-diagnostics-content.styles';
+import { styled } from './workflow-diagnostics-content.styles';
 import { type Props } from './workflow-diagnostics-content.types';
 
 export default function WorkflowDiagnosticsContent({
@@ -19,65 +14,35 @@ export default function WorkflowDiagnosticsContent({
   cluster,
   workflowId,
   runId,
+  diagnosticsResult,
 }: Props) {
-  const { data, error, status } = useDiagnoseWorkflow({
-    domain,
-    cluster,
-    workflowId,
-    runId,
-  });
-
   const [activeView, setActiveView] = useState<'list' | 'json'>('list');
-  useEffect(() => {
-    if (data?.parsingError) {
-      setActiveView('json');
-    }
-  }, [data?.parsingError]);
-
-  if (status === 'pending') {
-    return <SectionLoadingIndicator />;
-  }
-
-  if (status === 'error') {
-    throw error;
-  }
-
-  const ViewComponent =
-    activeView === 'list' ? WorkflowDiagnosticsList : WorkflowDiagnosticsJson;
 
   return (
-    <styled.PageSection>
+    <>
       <styled.ButtonsContainer>
-        <SegmentedControl
-          activeKey={activeView}
-          onChange={({ activeKey }) => {
-            setActiveView(activeKey === 'list' ? 'list' : 'json');
-          }}
-          overrides={overrides.viewToggle}
-        >
-          <Segment
-            key="list"
-            disabled={Boolean(data.parsingError)}
-            artwork={() => <MdSort />}
-            label="List"
-            overrides={overrides.viewToggleSegment}
-          />
-          <Segment
-            key="json"
-            artwork={() => <MdCode />}
-            label="JSON"
-            overrides={overrides.viewToggleSegment}
-          />
-        </SegmentedControl>
-        {/* Add a button here to expand all diagnostics issues, hide in JSON mode ofc */}
+        <WorkflowDiagnosticsViewToggle
+          listEnabled
+          activeView={activeView}
+          setActiveView={setActiveView}
+        />
+        {/* TODO: Add a button here to expand all diagnostics issues, hide in JSON mode ofc */}
       </styled.ButtonsContainer>
-      <ViewComponent
-        domain={domain}
-        cluster={cluster}
-        workflowId={workflowId}
-        runId={runId}
-        diagnosticsResponse={data}
-      />
-    </styled.PageSection>
+      {activeView === 'list' ? (
+        <WorkflowDiagnosticsList
+          domain={domain}
+          cluster={cluster}
+          workflowId={workflowId}
+          runId={runId}
+          diagnosticsResult={diagnosticsResult}
+        />
+      ) : (
+        <WorkflowDiagnosticsJson
+          workflowId={workflowId}
+          runId={runId}
+          diagnosticsResult={diagnosticsResult}
+        />
+      )}
+    </>
   );
 }
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.types.ts b/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.types.ts
index 49b1f544..7301a758 100644
--- a/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.types.ts
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-content/workflow-diagnostics-content.types.ts
@@ -1,16 +1,9 @@
-import { type DiagnoseWorkflowResponse } from '@/route-handlers/diagnose-workflow/diagnose-workflow.types';
+import { type WorkflowDiagnosticsResult } from '@/route-handlers/diagnose-workflow/diagnose-workflow.types';
 
 export type Props = {
   domain: string;
   cluster: string;
   workflowId: string;
   runId: string;
-};
-
-export type ViewComponentProps = {
-  domain: string;
-  cluster: string;
-  workflowId: string;
-  runId: string;
-  diagnosticsResponse: DiagnoseWorkflowResponse;
+  diagnosticsResult: WorkflowDiagnosticsResult;
 };
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-fallback/workflow-diagnostics-fallback.styles.ts b/src/views/workflow-diagnostics/workflow-diagnostics-fallback/workflow-diagnostics-fallback.styles.ts
new file mode 100644
index 00000000..634e2534
--- /dev/null
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-fallback/workflow-diagnostics-fallback.styles.ts
@@ -0,0 +1,5 @@
+import { styled as contentStyledComponents } from '../workflow-diagnostics-content/workflow-diagnostics-content.styles';
+
+export const styled = {
+  ButtonsContainer: contentStyledComponents.ButtonsContainer,
+};
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-fallback/workflow-diagnostics-fallback.tsx b/src/views/workflow-diagnostics/workflow-diagnostics-fallback/workflow-diagnostics-fallback.tsx
new file mode 100644
index 00000000..ebc41c0e
--- /dev/null
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-fallback/workflow-diagnostics-fallback.tsx
@@ -0,0 +1,24 @@
+import WorkflowDiagnosticsJson from '../workflow-diagnostics-json/workflow-diagnostics-json';
+import WorkflowDiagnosticsViewToggle from '../workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle';
+
+import { styled } from './workflow-diagnostics-fallback.styles';
+import { type Props } from './workflow-diagnostics-fallback.types';
+
+export default function WorkflowDiagnosticsFallback({
+  workflowId,
+  runId,
+  diagnosticsResult,
+}: Props) {
+  return (
+    <>
+      <styled.ButtonsContainer>
+        <WorkflowDiagnosticsViewToggle listEnabled={false} />
+      </styled.ButtonsContainer>
+      <WorkflowDiagnosticsJson
+        workflowId={workflowId}
+        runId={runId}
+        diagnosticsResult={diagnosticsResult}
+      />
+    </>
+  );
+}
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-fallback/workflow-diagnostics-fallback.types.ts b/src/views/workflow-diagnostics/workflow-diagnostics-fallback/workflow-diagnostics-fallback.types.ts
new file mode 100644
index 00000000..07ccc41d
--- /dev/null
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-fallback/workflow-diagnostics-fallback.types.ts
@@ -0,0 +1,5 @@
+export type Props = {
+  workflowId: string;
+  runId: string;
+  diagnosticsResult: any;
+};
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-json/workflow-diagnostics-json.tsx b/src/views/workflow-diagnostics/workflow-diagnostics-json/workflow-diagnostics-json.tsx
index 5503cf54..b30cb1ca 100644
--- a/src/views/workflow-diagnostics/workflow-diagnostics-json/workflow-diagnostics-json.tsx
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-json/workflow-diagnostics-json.tsx
@@ -8,17 +8,14 @@ import PrettyJson from '@/components/pretty-json/pretty-json';
 import downloadJson from '@/utils/download-json';
 import losslessJsonStringify from '@/utils/lossless-json-stringify';
 
-import { type ViewComponentProps } from '../workflow-diagnostics-content/workflow-diagnostics-content.types';
-
 import { styled, overrides } from './workflow-diagnostics-json.styles';
+import { type Props } from './workflow-diagnostics-json.types';
 
 export default function WorkflowDiagnosticsJson({
   workflowId,
   runId,
-  diagnosticsResponse,
-}: ViewComponentProps) {
-  const diagnosticsResult = diagnosticsResponse.result;
-
+  diagnosticsResult,
+}: Props) {
   const textToCopy = useMemo(() => {
     return losslessJsonStringify(diagnosticsResult, null, '\t');
   }, [diagnosticsResult]);
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-json/workflow-diagnostics-json.types.ts b/src/views/workflow-diagnostics/workflow-diagnostics-json/workflow-diagnostics-json.types.ts
new file mode 100644
index 00000000..07ccc41d
--- /dev/null
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-json/workflow-diagnostics-json.types.ts
@@ -0,0 +1,5 @@
+export type Props = {
+  workflowId: string;
+  runId: string;
+  diagnosticsResult: any;
+};
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-list/workflow-diagnostics-list.tsx b/src/views/workflow-diagnostics/workflow-diagnostics-list/workflow-diagnostics-list.tsx
index 77aa4b23..d30b36fa 100644
--- a/src/views/workflow-diagnostics/workflow-diagnostics-list/workflow-diagnostics-list.tsx
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-list/workflow-diagnostics-list.tsx
@@ -1,19 +1,10 @@
-import ErrorPanel from '@/components/error-panel/error-panel';
-
-import { type ViewComponentProps } from '../workflow-diagnostics-content/workflow-diagnostics-content.types';
-
-export default function WorkflowDiagnosticsList({
-  diagnosticsResponse,
-}: ViewComponentProps) {
-  // This case is unreachable because the List view is disabled if diagnostics parsing fails
-  if (diagnosticsResponse.parsingError) {
-    return <ErrorPanel message="Failed to parse workflow diagnostics" />;
-  }
+import { type Props } from './workflow-diagnostics-list.types';
 
+export default function WorkflowDiagnosticsList({ diagnosticsResult }: Props) {
   return (
     <div>
       <div>Diagnostics List (WIP)</div>
-      {JSON.stringify(diagnosticsResponse.result, null, 2)}
+      {JSON.stringify(diagnosticsResult, null, 2)}
     </div>
   );
 }
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-list/workflow-diagnostics-list.types.ts b/src/views/workflow-diagnostics/workflow-diagnostics-list/workflow-diagnostics-list.types.ts
new file mode 100644
index 00000000..7301a758
--- /dev/null
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-list/workflow-diagnostics-list.types.ts
@@ -0,0 +1,9 @@
+import { type WorkflowDiagnosticsResult } from '@/route-handlers/diagnose-workflow/diagnose-workflow.types';
+
+export type Props = {
+  domain: string;
+  cluster: string;
+  workflowId: string;
+  runId: string;
+  diagnosticsResult: WorkflowDiagnosticsResult;
+};
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle.styles.ts b/src/views/workflow-diagnostics/workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle.styles.ts
new file mode 100644
index 00000000..dd529cd9
--- /dev/null
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle.styles.ts
@@ -0,0 +1,44 @@
+import {
+  type SegmentedControlOverrides,
+  type SegmentOverrides,
+} from 'baseui/segmented-control';
+import { type Theme } from 'baseui/theme';
+import { type StyleObject } from 'styletron-react';
+
+export const overrides = {
+  viewToggle: {
+    Root: {
+      style: ({ $theme }: { $theme: Theme }): StyleObject => ({
+        height: $theme.sizing.scale950,
+        padding: $theme.sizing.scale0,
+        borderRadius: $theme.borders.radius300,
+        ...$theme.typography.ParagraphSmall,
+        width: 'auto',
+        flexGrow: 1,
+        [$theme.mediaQuery.medium]: {
+          flexGrow: 0,
+        },
+      }),
+    },
+    SegmentList: {
+      style: ({ $theme }: { $theme: Theme }): StyleObject => ({
+        height: $theme.sizing.scale950,
+        ...$theme.typography.ParagraphSmall,
+      }),
+    },
+    Active: {
+      style: ({ $theme }: { $theme: Theme }): StyleObject => ({
+        height: $theme.sizing.scale900,
+        top: 0,
+      }),
+    },
+  } satisfies SegmentedControlOverrides,
+  viewToggleSegment: {
+    Segment: {
+      style: ({ $theme }: { $theme: Theme }): StyleObject => ({
+        height: $theme.sizing.scale900,
+        whiteSpace: 'nowrap',
+      }),
+    },
+  } satisfies SegmentOverrides,
+};
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle.tsx b/src/views/workflow-diagnostics/workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle.tsx
new file mode 100644
index 00000000..57093251
--- /dev/null
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle.tsx
@@ -0,0 +1,36 @@
+import { Segment, SegmentedControl } from 'baseui/segmented-control';
+import { MdCode, MdSort } from 'react-icons/md';
+
+import { overrides } from './workflow-diagnostics-view-toggle.styles';
+import { type Props } from './workflow-diagnostics-view-toggle.types';
+
+export default function WorkflowDiagnosticsViewToggle(props: Props) {
+  return (
+    <SegmentedControl
+      {...(props.listEnabled
+        ? {
+            activeKey: props.activeView,
+            onChange: ({ activeKey }) =>
+              props.setActiveView(activeKey === 'list' ? 'list' : 'json'),
+          }
+        : {
+            activeKey: 'json',
+          })}
+      overrides={overrides.viewToggle}
+    >
+      <Segment
+        key="list"
+        artwork={() => <MdSort />}
+        label="List"
+        disabled={!props.listEnabled}
+        overrides={overrides.viewToggleSegment}
+      />
+      <Segment
+        key="json"
+        artwork={() => <MdCode />}
+        label="JSON"
+        overrides={overrides.viewToggleSegment}
+      />
+    </SegmentedControl>
+  );
+}
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle.types.ts b/src/views/workflow-diagnostics/workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle.types.ts
new file mode 100644
index 00000000..09da2b41
--- /dev/null
+++ b/src/views/workflow-diagnostics/workflow-diagnostics-view-toggle/workflow-diagnostics-view-toggle.types.ts
@@ -0,0 +1,13 @@
+export type DiagnosticsViewMode = 'list' | 'json';
+
+export type ListEnabledProps = {
+  listEnabled: true;
+  activeView: DiagnosticsViewMode;
+  setActiveView: (view: DiagnosticsViewMode) => void;
+};
+
+export type ListDisabledProps = {
+  listEnabled: false;
+};
+
+export type Props = ListEnabledProps | ListDisabledProps;
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics.styles.ts b/src/views/workflow-diagnostics/workflow-diagnostics.styles.ts
new file mode 100644
index 00000000..773eca96
--- /dev/null
+++ b/src/views/workflow-diagnostics/workflow-diagnostics.styles.ts
@@ -0,0 +1,12 @@
+import { withStyle } from 'baseui';
+import { type Theme } from 'baseui/theme';
+
+import PageSection from '@/components/page-section/page-section';
+
+export const styled = {
+  PageSection: withStyle(PageSection, ({ $theme }: { $theme: Theme }) => ({
+    display: 'flex',
+    flexDirection: 'column',
+    gap: $theme.sizing.scale800,
+  })),
+};
diff --git a/src/views/workflow-diagnostics/workflow-diagnostics.tsx b/src/views/workflow-diagnostics/workflow-diagnostics.tsx
index 13c1a733..b2d3f44e 100644
--- a/src/views/workflow-diagnostics/workflow-diagnostics.tsx
+++ b/src/views/workflow-diagnostics/workflow-diagnostics.tsx
@@ -4,12 +4,16 @@ import React from 'react';
 
 import ErrorPanel from '@/components/error-panel/error-panel';
 import PanelSection from '@/components/panel-section/panel-section';
+import SectionLoadingIndicator from '@/components/section-loading-indicator/section-loading-indicator';
 import { type WorkflowPageTabContentProps } from '@/views/workflow-page/workflow-page-tab-content/workflow-page-tab-content.types';
 
 import useSuspenseIsWorkflowDiagnosticsEnabled from '../workflow-page/hooks/use-is-workflow-diagnostics-enabled/use-suspense-is-workflow-diagnostics-enabled';
 
 import workflowDiagnosticsDisabledErrorPanelConfig from './config/workflow-diagnostics-disabled-error-panel.config';
+import useDiagnoseWorkflow from './hooks/use-diagnose-workflow/use-diagnose-workflow';
 import WorkflowDiagnosticsContent from './workflow-diagnostics-content/workflow-diagnostics-content';
+import WorkflowDiagnosticsFallback from './workflow-diagnostics-fallback/workflow-diagnostics-fallback';
+import { styled } from './workflow-diagnostics.styles';
 
 export default function WorkflowDiagnostics({
   params,
@@ -17,6 +21,10 @@ export default function WorkflowDiagnostics({
   const { data: isWorkflowDiagnosticsEnabled } =
     useSuspenseIsWorkflowDiagnosticsEnabled();
 
+  const { data, error, status } = useDiagnoseWorkflow(params, {
+    enabled: isWorkflowDiagnosticsEnabled,
+  });
+
   if (!isWorkflowDiagnosticsEnabled) {
     return (
       <PanelSection>
@@ -25,5 +33,27 @@ export default function WorkflowDiagnostics({
     );
   }
 
-  return <WorkflowDiagnosticsContent {...params} />;
+  if (status === 'pending') {
+    return <SectionLoadingIndicator />;
+  }
+
+  if (status === 'error') {
+    throw error;
+  }
+
+  return (
+    <styled.PageSection>
+      {data.parsingError ? (
+        <WorkflowDiagnosticsFallback
+          {...params}
+          diagnosticsResult={data.result}
+        />
+      ) : (
+        <WorkflowDiagnosticsContent
+          {...params}
+          diagnosticsResult={data.result}
+        />
+      )}
+    </styled.PageSection>
+  );
 }
